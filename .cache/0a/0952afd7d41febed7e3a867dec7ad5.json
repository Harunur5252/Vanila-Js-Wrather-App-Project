{"id":"node_modules/regenerator-transform/lib/emit.js","dependencies":[{"name":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\package.json","includedInParent":true,"mtime":1625143526483},{"name":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\package.json","includedInParent":true,"mtime":1625143525868},{"name":"@babel/runtime/helpers/interopRequireWildcard","loc":{"line":3,"column":38},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\@babel\\runtime\\helpers\\interopRequireWildcard.js"},{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":5,"column":37},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"},{"name":"assert","loc":{"line":7,"column":45},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\assert\\assert.js"},{"name":"./leap","loc":{"line":9,"column":43},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\leap.js"},{"name":"./meta","loc":{"line":11,"column":43},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\meta.js"},{"name":"./util","loc":{"line":13,"column":43},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\emit.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar leap = _interopRequireWildcard(require(\"./leap\"));\n\nvar meta = _interopRequireWildcard(require(\"./meta\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert[\"default\"].ok(this instanceof Emitter);\n\n  util.getTypes().assertIdentifier(contextId); // Used to generate unique temporary names.\n\n  this.nextTempId = 0; // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n\n  this.contextId = contextId; // An append-only list of Statements that grows each time this.emit is\n  // called.\n\n  this.listing = []; // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n\n  this.marked = [true];\n  this.insertedLocs = new Set(); // The last location will be marked when this.getDispatchLoop is\n  // called.\n\n  this.finalLoc = this.loc(); // A list of all leap.TryEntry statements emitted.\n\n  this.tryEntries = []; // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter; // Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\n\nEp.loc = function () {\n  var l = util.getTypes().numericLiteral(-1);\n  this.insertedLocs.add(l);\n  return l;\n};\n\nEp.getInsertedLocs = function () {\n  return this.insertedLocs;\n};\n\nEp.getContextId = function () {\n  return util.getTypes().clone(this.contextId);\n}; // Sets the exact value of the given location to the offset of the next\n// Statement emitted.\n\n\nEp.mark = function (loc) {\n  util.getTypes().assertLiteral(loc);\n  var index = this.listing.length;\n\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert[\"default\"].strictEqual(loc.value, index);\n  }\n\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  var t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n}; // Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\n\n\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n}; // Shorthand for an assignment statement.\n\n\nEp.assign = function (lhs, rhs) {\n  var t = util.getTypes();\n  return t.expressionStatement(t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n}; // Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\n\n\nEp.contextProperty = function (name, computed) {\n  var t = util.getTypes();\n  return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n}; // Shorthand for setting context.rval and jumping to `context.stop()`.\n\n\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  var t = util.getTypes();\n  t.assertLiteral(tryLoc);\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [t.clone(tryLoc)]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n}; // Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\n\n\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n}; // Conditional jump.\n\n\nEp.jumpIf = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Conditional jump, with the condition negated.\n\n\nEp.jumpIfNot = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  var negatedTest;\n\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\n\n\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  var t = util.getTypes();\n  return t.functionExpression(id || null\n  /*Anonymous*/\n  , [this.getContextId()], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n}; // Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\n\n\nEp.getDispatchLoop = function () {\n  var self = this;\n  var t = util.getTypes();\n  var cases = [];\n  var current; // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n\n  var alreadyEnded = false;\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  }); // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n\n  this.finalLoc.value = this.listing.length;\n  cases.push(t.switchCase(this.finalLoc, [// Intentionally fall through to the \"end\" case...\n  ]), // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [// This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var t = util.getTypes();\n  var lastLocValue = 0;\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n\n    _assert[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n\n    lastLocValue = thisLocValue;\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n    var locs = [tryEntry.firstLoc, // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs.map(function (loc) {\n      return loc && t.clone(loc);\n    }));\n  }));\n}; // All side effects must be realized in order.\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n// No destructive modification of AST nodes.\n\n\nEp.explode = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var node = path.node;\n  var self = this;\n  t.assertNode(node);\n  if (t.isDeclaration(node)) throw getDeclError(node);\n  if (t.isStatement(node)) return self.explodeStatement(path);\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var t = util.getTypes();\n  var stmt = path.node;\n  var self = this;\n  var before, after, head;\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  } // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n\n\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = this.loc(); // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n      self.mark(after);\n      break;\n\n    case \"WhileStatement\":\n      before = this.loc();\n      after = this.loc();\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n      break;\n\n    case \"DoWhileStatement\":\n      var first = this.loc();\n      var test = this.loc();\n      after = this.loc();\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n      break;\n\n    case \"ForStatement\":\n      head = this.loc();\n      var update = this.loc();\n      after = this.loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {// No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = this.loc();\n      after = this.loc();\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n      self.mark(head);\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier(\"done\"), false), after);\n      self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier(\"value\"), false));\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n      after = this.loc();\n      var defaultLoc = this.loc();\n      var condition = defaultLoc;\n      var caseLocs = []; // If there are no cases, .cases might be undefined.\n\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      util.replaceWithOrRemove(discriminant, condition);\n      self.jump(self.explodeExpression(discriminant));\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n      self.mark(after);\n\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n\n        _assert[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && this.loc();\n      after = this.loc();\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = this.loc();\n      var handler = stmt.handler;\n      var catchLoc = handler && this.loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n      var finallyLoc = stmt.finalizer && this.loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          if (finallyLoc) {\n            // If we have both a catch block and a finally block, then\n            // because we emit the catch block first, we need to jump over\n            // it to the finally block.\n            self.jump(finallyLoc);\n          } else {\n            // If there is no finally block, then we need to jump over the\n            // catch block to the fall-through location.\n            self.jump(after);\n          }\n\n          self.updateContextPrevLoc(self.mark(catchLoc));\n          var bodyPath = path.get(\"handler.body\");\n          var safeParam = self.makeTempVar();\n          self.clearPendingException(tryEntry.firstLoc, safeParam);\n          bodyPath.traverse(catchParamVisitor, {\n            getSafeParam: function getSafeParam() {\n              return t.cloneDeep(safeParam);\n            },\n            catchParamName: handler.param.name\n          });\n          self.leapManager.withEntry(catchEntry, function () {\n            self.explodeStatement(bodyPath);\n          });\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n      self.mark(after);\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var t = util.getTypes();\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n} // Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\n\n\nEp.getUnmarkedCurrentLoc = function () {\n  return util.getTypes().numericLiteral(this.listing.length);\n}; // The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\n\n\nEp.updateContextPrevLoc = function (loc) {\n  var t = util.getTypes();\n\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  } // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n\n\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var expr = path.node;\n\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result; // Used optionally by several cases below.\n\n  var after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  } // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n\n\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  } // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n\n\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr); // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {// Side effects already emitted above.\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(tempVar || self.makeTempVar(), result);\n    }\n\n    return result;\n  } // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n      var newCallee;\n      var newArgs;\n      var hasLeapingArgs = argsPath.some(function (argPath) {\n        return meta.containsLeap(argPath.node);\n      });\n      var injectFirstArg = null;\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n          var newObject = explodeViaTempVar( // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n          injectFirstArg = newObject;\n          newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = explodeViaTempVar(null, calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), t.cloneDeep(newCallee)]);\n        }\n      }\n\n      if (hasLeapingArgs) {\n        newArgs = argsPath.map(function (argPath) {\n          return explodeViaTempVar(null, argPath);\n        });\n        if (injectFirstArg) newArgs.unshift(injectFirstArg);\n        newArgs = newArgs.map(function (arg) {\n          return t.cloneDeep(arg);\n        });\n      } else {\n        newArgs = path.node.arguments;\n      }\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(explodeViaTempVar(null, elemPath.get(\"argument\")));\n        } else {\n          return explodeViaTempVar(null, elemPath);\n        }\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n      return result;\n\n    case \"LogicalExpression\":\n      after = this.loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert[\"default\"].strictEqual(expr.operator, \"||\");\n\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = this.loc();\n      after = this.loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      if (expr.operator === \"=\") {\n        // If this is a simple assignment, the left hand side does not need\n        // to be read before the right hand side is evaluated, so we can\n        // avoid the more complicated logic below.\n        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n      }\n\n      var lhs = self.explodeExpression(path.get(\"left\"));\n      var temp = self.emitAssign(self.makeTempVar(), lhs); // For example,\n      //\n      //   x += yield y\n      //\n      // becomes\n      //\n      //   context.t0 = x\n      //   x = context.t0 += yield y\n      //\n      // so that the left-hand side expression is read before the yield.\n      // Fixes https://github.com/facebook/regenerator/issues/345.\n\n      return finish(t.assignmentExpression(\"=\", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get(\"right\")))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = this.loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        var _ret = t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after]));\n\n        _ret.loc = expr.loc;\n        self.emit(_ret);\n        self.mark(after);\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      var ret = t.returnStatement(t.cloneDeep(arg) || null); // Preserve the `yield` location so that source mappings for the statements\n      // link back to the yield properly.\n\n      ret.loc = expr.loc;\n      self.emit(ret);\n      self.mark(after);\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":928,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":929,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":930,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":931,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":932,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":933,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":934,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":935,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":936,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":937,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":938,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":939,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":940,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":941,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":942,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":943,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":944,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":945,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":946,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":947,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":948,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":949,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":950,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":951,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":952,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":953,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":954,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":955,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":956,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":957,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":958,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/regenerator-transform/lib/emit.js","original":{"line":959,"column":0},"generated":{"line":959,"column":0}}],"sources":{"node_modules/regenerator-transform/lib/emit.js":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar leap = _interopRequireWildcard(require(\"./leap\"));\n\nvar meta = _interopRequireWildcard(require(\"./meta\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert[\"default\"].ok(this instanceof Emitter);\n\n  util.getTypes().assertIdentifier(contextId); // Used to generate unique temporary names.\n\n  this.nextTempId = 0; // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n\n  this.contextId = contextId; // An append-only list of Statements that grows each time this.emit is\n  // called.\n\n  this.listing = []; // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n\n  this.marked = [true];\n  this.insertedLocs = new Set(); // The last location will be marked when this.getDispatchLoop is\n  // called.\n\n  this.finalLoc = this.loc(); // A list of all leap.TryEntry statements emitted.\n\n  this.tryEntries = []; // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter; // Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\n\nEp.loc = function () {\n  var l = util.getTypes().numericLiteral(-1);\n  this.insertedLocs.add(l);\n  return l;\n};\n\nEp.getInsertedLocs = function () {\n  return this.insertedLocs;\n};\n\nEp.getContextId = function () {\n  return util.getTypes().clone(this.contextId);\n}; // Sets the exact value of the given location to the offset of the next\n// Statement emitted.\n\n\nEp.mark = function (loc) {\n  util.getTypes().assertLiteral(loc);\n  var index = this.listing.length;\n\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert[\"default\"].strictEqual(loc.value, index);\n  }\n\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  var t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n}; // Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\n\n\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n}; // Shorthand for an assignment statement.\n\n\nEp.assign = function (lhs, rhs) {\n  var t = util.getTypes();\n  return t.expressionStatement(t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n}; // Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\n\n\nEp.contextProperty = function (name, computed) {\n  var t = util.getTypes();\n  return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n}; // Shorthand for setting context.rval and jumping to `context.stop()`.\n\n\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  var t = util.getTypes();\n  t.assertLiteral(tryLoc);\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [t.clone(tryLoc)]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n}; // Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\n\n\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n}; // Conditional jump.\n\n\nEp.jumpIf = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Conditional jump, with the condition negated.\n\n\nEp.jumpIfNot = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  var negatedTest;\n\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\n\n\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  var t = util.getTypes();\n  return t.functionExpression(id || null\n  /*Anonymous*/\n  , [this.getContextId()], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n}; // Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\n\n\nEp.getDispatchLoop = function () {\n  var self = this;\n  var t = util.getTypes();\n  var cases = [];\n  var current; // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n\n  var alreadyEnded = false;\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  }); // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n\n  this.finalLoc.value = this.listing.length;\n  cases.push(t.switchCase(this.finalLoc, [// Intentionally fall through to the \"end\" case...\n  ]), // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [// This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var t = util.getTypes();\n  var lastLocValue = 0;\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n\n    _assert[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n\n    lastLocValue = thisLocValue;\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n    var locs = [tryEntry.firstLoc, // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs.map(function (loc) {\n      return loc && t.clone(loc);\n    }));\n  }));\n}; // All side effects must be realized in order.\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n// No destructive modification of AST nodes.\n\n\nEp.explode = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var node = path.node;\n  var self = this;\n  t.assertNode(node);\n  if (t.isDeclaration(node)) throw getDeclError(node);\n  if (t.isStatement(node)) return self.explodeStatement(path);\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var t = util.getTypes();\n  var stmt = path.node;\n  var self = this;\n  var before, after, head;\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  } // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n\n\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = this.loc(); // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n      self.mark(after);\n      break;\n\n    case \"WhileStatement\":\n      before = this.loc();\n      after = this.loc();\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n      break;\n\n    case \"DoWhileStatement\":\n      var first = this.loc();\n      var test = this.loc();\n      after = this.loc();\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n      break;\n\n    case \"ForStatement\":\n      head = this.loc();\n      var update = this.loc();\n      after = this.loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {// No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = this.loc();\n      after = this.loc();\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n      self.mark(head);\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier(\"done\"), false), after);\n      self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier(\"value\"), false));\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n      after = this.loc();\n      var defaultLoc = this.loc();\n      var condition = defaultLoc;\n      var caseLocs = []; // If there are no cases, .cases might be undefined.\n\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      util.replaceWithOrRemove(discriminant, condition);\n      self.jump(self.explodeExpression(discriminant));\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n      self.mark(after);\n\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n\n        _assert[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && this.loc();\n      after = this.loc();\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = this.loc();\n      var handler = stmt.handler;\n      var catchLoc = handler && this.loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n      var finallyLoc = stmt.finalizer && this.loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          if (finallyLoc) {\n            // If we have both a catch block and a finally block, then\n            // because we emit the catch block first, we need to jump over\n            // it to the finally block.\n            self.jump(finallyLoc);\n          } else {\n            // If there is no finally block, then we need to jump over the\n            // catch block to the fall-through location.\n            self.jump(after);\n          }\n\n          self.updateContextPrevLoc(self.mark(catchLoc));\n          var bodyPath = path.get(\"handler.body\");\n          var safeParam = self.makeTempVar();\n          self.clearPendingException(tryEntry.firstLoc, safeParam);\n          bodyPath.traverse(catchParamVisitor, {\n            getSafeParam: function getSafeParam() {\n              return t.cloneDeep(safeParam);\n            },\n            catchParamName: handler.param.name\n          });\n          self.leapManager.withEntry(catchEntry, function () {\n            self.explodeStatement(bodyPath);\n          });\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n      self.mark(after);\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var t = util.getTypes();\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n} // Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\n\n\nEp.getUnmarkedCurrentLoc = function () {\n  return util.getTypes().numericLiteral(this.listing.length);\n}; // The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\n\n\nEp.updateContextPrevLoc = function (loc) {\n  var t = util.getTypes();\n\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  } // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n\n\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var expr = path.node;\n\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result; // Used optionally by several cases below.\n\n  var after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  } // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n\n\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  } // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n\n\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr); // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {// Side effects already emitted above.\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(tempVar || self.makeTempVar(), result);\n    }\n\n    return result;\n  } // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n      var newCallee;\n      var newArgs;\n      var hasLeapingArgs = argsPath.some(function (argPath) {\n        return meta.containsLeap(argPath.node);\n      });\n      var injectFirstArg = null;\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n          var newObject = explodeViaTempVar( // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n          injectFirstArg = newObject;\n          newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = explodeViaTempVar(null, calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), t.cloneDeep(newCallee)]);\n        }\n      }\n\n      if (hasLeapingArgs) {\n        newArgs = argsPath.map(function (argPath) {\n          return explodeViaTempVar(null, argPath);\n        });\n        if (injectFirstArg) newArgs.unshift(injectFirstArg);\n        newArgs = newArgs.map(function (arg) {\n          return t.cloneDeep(arg);\n        });\n      } else {\n        newArgs = path.node.arguments;\n      }\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(explodeViaTempVar(null, elemPath.get(\"argument\")));\n        } else {\n          return explodeViaTempVar(null, elemPath);\n        }\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n      return result;\n\n    case \"LogicalExpression\":\n      after = this.loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert[\"default\"].strictEqual(expr.operator, \"||\");\n\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = this.loc();\n      after = this.loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      if (expr.operator === \"=\") {\n        // If this is a simple assignment, the left hand side does not need\n        // to be read before the right hand side is evaluated, so we can\n        // avoid the more complicated logic below.\n        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n      }\n\n      var lhs = self.explodeExpression(path.get(\"left\"));\n      var temp = self.emitAssign(self.makeTempVar(), lhs); // For example,\n      //\n      //   x += yield y\n      //\n      // becomes\n      //\n      //   context.t0 = x\n      //   x = context.t0 += yield y\n      //\n      // so that the left-hand side expression is read before the yield.\n      // Fixes https://github.com/facebook/regenerator/issues/345.\n\n      return finish(t.assignmentExpression(\"=\", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get(\"right\")))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = this.loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        var _ret = t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after]));\n\n        _ret.loc = expr.loc;\n        self.emit(_ret);\n        self.mark(after);\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      var ret = t.returnStatement(t.cloneDeep(arg) || null); // Preserve the `yield` location so that source mappings for the statements\n      // link back to the yield properly.\n\n      ret.loc = expr.loc;\n      self.emit(ret);\n      self.mark(after);\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};"},"lineCount":959}},"error":null,"hash":"fbcce78a44c28d904c392db8b6e1b86e","cacheData":{"env":{}}}