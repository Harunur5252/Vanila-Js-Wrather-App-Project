{"id":"node_modules/regenerator-transform/lib/meta.js","dependencies":[{"name":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\package.json","includedInParent":true,"mtime":1625143526483},{"name":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\package.json","includedInParent":true,"mtime":1625143525868},{"name":"@babel/runtime/helpers/interopRequireDefault","loc":{"line":3,"column":37},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\meta.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\@babel\\runtime\\helpers\\interopRequireDefault.js"},{"name":"assert","loc":{"line":5,"column":45},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\meta.js","resolved":"C:\\Users\\USER\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\assert\\assert.js"},{"name":"./util.js","loc":{"line":7,"column":20},"parent":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\meta.js","resolved":"E:\\Web Developer Bd\\Projects\\weather_app_practise\\node_modules\\regenerator-transform\\lib\\util.js"}],"generated":{"js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar _util = require(\"./util.js\");\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar mMap = new WeakMap();\n\nfunction m(node) {\n  if (!mMap.has(node)) {\n    mMap.set(node, {});\n  }\n\n  return mMap.get(node);\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    var t = (0, _util.getTypes)();\n    t.assertNode(node); // Assume no side effects until we find out otherwise.\n\n    var result = false;\n\n    function check(child) {\n      if (result) {// Do nothing.\n      } else if (Array.isArray(child)) {\n        child.some(check);\n      } else if (t.isNode(child)) {\n        _assert[\"default\"].strictEqual(result, false);\n\n        result = predicate(child);\n      }\n\n      return result;\n    }\n\n    var keys = t.VISITOR_KEYS[node.type];\n\n    if (keys) {\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var child = node[key];\n        check(child);\n      }\n    }\n\n    return result;\n  }\n\n  function predicate(node) {\n    (0, _util.getTypes)().assertNode(node);\n    var meta = m(node);\n    if (hasOwn.call(meta, propertyName)) return meta[propertyName]; // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n\n    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;\n    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n  return predicate;\n}\n\nvar opaqueTypes = {\n  FunctionExpression: true,\n  ArrowFunctionExpression: true\n}; // These types potentially have side effects regardless of what side\n// effects their subexpressions have.\n\nvar sideEffectTypes = {\n  CallExpression: true,\n  // Anything could happen!\n  ForInStatement: true,\n  // Modifies the key variable.\n  UnaryExpression: true,\n  // Think delete.\n  BinaryExpression: true,\n  // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true,\n  // Side-effecting by definition.\n  UpdateExpression: true,\n  // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n\n}; // These types are the direct cause of all leaps in control flow.\n\nvar leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n}; // All leap types are also side effect types.\n\nfor (var type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/regenerator-transform/lib/meta.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}}],"sources":{"node_modules/regenerator-transform/lib/meta.js":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar _util = require(\"./util.js\");\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar mMap = new WeakMap();\n\nfunction m(node) {\n  if (!mMap.has(node)) {\n    mMap.set(node, {});\n  }\n\n  return mMap.get(node);\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction makePredicate(propertyName, knownTypes) {\n  function onlyChildren(node) {\n    var t = (0, _util.getTypes)();\n    t.assertNode(node); // Assume no side effects until we find out otherwise.\n\n    var result = false;\n\n    function check(child) {\n      if (result) {// Do nothing.\n      } else if (Array.isArray(child)) {\n        child.some(check);\n      } else if (t.isNode(child)) {\n        _assert[\"default\"].strictEqual(result, false);\n\n        result = predicate(child);\n      }\n\n      return result;\n    }\n\n    var keys = t.VISITOR_KEYS[node.type];\n\n    if (keys) {\n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var child = node[key];\n        check(child);\n      }\n    }\n\n    return result;\n  }\n\n  function predicate(node) {\n    (0, _util.getTypes)().assertNode(node);\n    var meta = m(node);\n    if (hasOwn.call(meta, propertyName)) return meta[propertyName]; // Certain types are \"opaque,\" which means they have no side\n    // effects or leaps and we don't care about their subexpressions.\n\n    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;\n    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;\n    return meta[propertyName] = onlyChildren(node);\n  }\n\n  predicate.onlyChildren = onlyChildren;\n  return predicate;\n}\n\nvar opaqueTypes = {\n  FunctionExpression: true,\n  ArrowFunctionExpression: true\n}; // These types potentially have side effects regardless of what side\n// effects their subexpressions have.\n\nvar sideEffectTypes = {\n  CallExpression: true,\n  // Anything could happen!\n  ForInStatement: true,\n  // Modifies the key variable.\n  UnaryExpression: true,\n  // Think delete.\n  BinaryExpression: true,\n  // Might invoke .toString() or .valueOf().\n  AssignmentExpression: true,\n  // Side-effecting by definition.\n  UpdateExpression: true,\n  // Updates are essentially assignments.\n  NewExpression: true // Similar to CallExpression.\n\n}; // These types are the direct cause of all leaps in control flow.\n\nvar leapTypes = {\n  YieldExpression: true,\n  BreakStatement: true,\n  ContinueStatement: true,\n  ReturnStatement: true,\n  ThrowStatement: true\n}; // All leap types are also side effect types.\n\nfor (var type in leapTypes) {\n  if (hasOwn.call(leapTypes, type)) {\n    sideEffectTypes[type] = leapTypes[type];\n  }\n}\n\nexports.hasSideEffects = makePredicate(\"hasSideEffects\", sideEffectTypes);\nexports.containsLeap = makePredicate(\"containsLeap\", leapTypes);"},"lineCount":113}},"error":null,"hash":"39b0ef23042fc6b819ddf950d59ed120","cacheData":{"env":{}}}